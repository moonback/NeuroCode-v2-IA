import type { AgentProfile, AgentChatThread } from '~/utils/types';
import { createScopedLogger } from '~/utils/logger';

const logger = createScopedLogger('AgentService');

// Agents pr√©d√©finis
const DEFAULT_AGENTS: AgentProfile[] = [
  {
    id: 'code_agent',
    name: 'Agent Codeur',
    description: 'Expert en d√©veloppement et analyse de code',
    initialPrompt: `Vous √™tes un agent IA expert en d√©veloppement logiciel. Votre r√¥le est d'analyser le code, identifier les probl√®mes, sugg√©rer des am√©liorations et aider √† l'impl√©mentation de nouvelles fonctionnalit√©s. Vous ma√Ætrisez plusieurs langages de programmation et les meilleures pratiques de d√©veloppement.`,
    model: 'llama3.2:latest',
    provider: 'ollama',
    tools: ['file_system', 'git', 'terminal'],
    avatar: 'üë®‚Äçüíª',
    color: '#3B82F6',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'doc_agent',
    name: 'Agent Documenteur',
    description: 'Sp√©cialis√© dans la r√©daction et la documentation',
    initialPrompt: `Vous √™tes un agent IA sp√©cialis√© dans la r√©daction de documentation technique. Votre mission est de cr√©er des documentations claires, compl√®tes et bien structur√©es pour les projets de d√©veloppement. Vous excellez dans la r√©daction de README, de guides d'utilisation et de documentation API.`,
    model: 'llama3.2:latest',
    provider: 'ollama',
    tools: ['file_system'],
    avatar: 'üìù',
    color: '#10B981',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'debug_agent',
    name: 'Agent D√©bogueur',
    description: 'Expert en r√©solution de bugs et optimisation',
    initialPrompt: `Vous √™tes un agent IA expert en d√©bogage et r√©solution de probl√®mes. Votre r√¥le est d'identifier les bugs, analyser les erreurs, proposer des solutions et optimiser les performances du code. Vous √™tes m√©thodique et pr√©cis dans votre approche de r√©solution de probl√®mes.`,
    model: 'llama3.2:latest',
    provider: 'ollama',
    tools: ['file_system', 'terminal', 'debug'],
    avatar: 'üêõ',
    color: '#EF4444',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'ui_agent',
    name: 'Agent UI/UX',
    description: 'Sp√©cialis√© dans le design et l\'exp√©rience utilisateur',
    initialPrompt: `Vous √™tes un agent IA expert en design UI/UX. Votre mission est d'am√©liorer l'interface utilisateur, proposer des am√©liorations d'exp√©rience utilisateur et cr√©er des interfaces modernes et intuitives. Vous ma√Ætrisez les principes de design, l'accessibilit√© et les tendances actuelles.`,
    model: 'llama3.2:latest',
    provider: 'ollama',
    tools: ['file_system'],
    avatar: 'üé®',
    color: '#8B5CF6',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

class AgentService {
  private storageKey = 'neurocode_agents';
  private threadsStorageKey = 'neurocode_agent_threads';

  /**
   * R√©cup√®re tous les profils d'agents
   */
  async listAgentProfiles(): Promise<AgentProfile[]> {
    try {
      const stored = localStorage.getItem(this.storageKey);
      if (stored) {
        const agents = JSON.parse(stored) as AgentProfile[];
        // Fusionner avec les agents par d√©faut si n√©cessaire
        const defaultIds = DEFAULT_AGENTS.map(a => a.id);
        const customAgents = agents.filter(a => !defaultIds.includes(a.id));
        return [...DEFAULT_AGENTS, ...customAgents];
      }
      // Premi√®re utilisation, retourner les agents par d√©faut
      await this.saveAgents(DEFAULT_AGENTS);
      return DEFAULT_AGENTS;
    } catch (error) {
      logger.error('Erreur lors de la r√©cup√©ration des agents:', error);
      return DEFAULT_AGENTS;
    }
  }

  /**
   * R√©cup√®re un profil d'agent par son ID
   */
  async getAgentProfile(id: string): Promise<AgentProfile | null> {
    const agents = await this.listAgentProfiles();
    return agents.find(agent => agent.id === id) || null;
  }

  /**
   * Cr√©e un nouveau profil d'agent
   */
  async createAgentProfile(agent: Omit<AgentProfile, 'id' | 'createdAt' | 'updatedAt'>): Promise<AgentProfile> {
    const newAgent: AgentProfile = {
      ...agent,
      id: this.generateId(),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    const agents = await this.listAgentProfiles();
    agents.push(newAgent);
    await this.saveAgents(agents);

    logger.info('Agent cr√©√©:', newAgent.id);
    return newAgent;
  }

  /**
   * Met √† jour un profil d'agent
   */
  async updateAgentProfile(id: string, updates: Partial<AgentProfile>): Promise<AgentProfile | null> {
    const agents = await this.listAgentProfiles();
    const index = agents.findIndex(agent => agent.id === id);
    
    if (index === -1) {
      logger.error('Agent non trouv√©:', id);
      return null;
    }

    agents[index] = {
      ...agents[index],
      ...updates,
      id, // Pr√©server l'ID
      updatedAt: new Date().toISOString(),
    };

    await this.saveAgents(agents);
    logger.info('Agent mis √† jour:', id);
    return agents[index];
  }

  /**
   * Supprime un profil d'agent
   */
  async deleteAgentProfile(id: string): Promise<boolean> {
    // Emp√™cher la suppression des agents par d√©faut
    if (DEFAULT_AGENTS.some(agent => agent.id === id)) {
      logger.warn('Tentative de suppression d\'un agent par d√©faut:', id);
      return false;
    }

    const agents = await this.listAgentProfiles();
    const filteredAgents = agents.filter(agent => agent.id !== id);
    
    if (filteredAgents.length === agents.length) {
      logger.error('Agent non trouv√© pour suppression:', id);
      return false;
    }

    await this.saveAgents(filteredAgents);
    // Supprimer aussi les threads associ√©s
    await this.deleteAgentThreads(id);
    
    logger.info('Agent supprim√©:', id);
    return true;
  }

  /**
   * R√©cup√®re les threads de chat pour un agent
   */
  async getAgentThreads(agentId: string): Promise<AgentChatThread[]> {
    try {
      const stored = localStorage.getItem(this.threadsStorageKey);
      if (stored) {
        const allThreads = JSON.parse(stored) as AgentChatThread[];
        return allThreads.filter(thread => thread.agentId === agentId);
      }
      return [];
    } catch (error) {
      logger.error('Erreur lors de la r√©cup√©ration des threads:', error);
      return [];
    }
  }

  /**
   * Sauvegarde un thread de chat pour un agent
   */
  async saveAgentThread(thread: AgentChatThread): Promise<void> {
    try {
      const stored = localStorage.getItem(this.threadsStorageKey);
      const allThreads = stored ? JSON.parse(stored) as AgentChatThread[] : [];
      
      const existingIndex = allThreads.findIndex(t => t.id === thread.id);
      if (existingIndex >= 0) {
        allThreads[existingIndex] = { ...thread, updatedAt: new Date().toISOString() };
      } else {
        allThreads.push(thread);
      }

      localStorage.setItem(this.threadsStorageKey, JSON.stringify(allThreads));
      logger.info('Thread sauvegard√©:', thread.id);
    } catch (error) {
      logger.error('Erreur lors de la sauvegarde du thread:', error);
    }
  }

  /**
   * Supprime un thread sp√©cifique d'un agent
   */
  async deleteAgentThread(agentId: string, threadId: string): Promise<boolean> {
    try {
      const stored = localStorage.getItem(this.threadsStorageKey);
      if (stored) {
        const allThreads = JSON.parse(stored) as AgentChatThread[];
        const filteredThreads = allThreads.filter(thread => !(thread.agentId === agentId && thread.id === threadId));
        
        if (filteredThreads.length === allThreads.length) {
          logger.error('Thread non trouv√© pour suppression:', threadId);
          return false;
        }
        
        localStorage.setItem(this.threadsStorageKey, JSON.stringify(filteredThreads));
        logger.info('Thread supprim√©:', threadId);
        return true;
      }
      return false;
    } catch (error) {
      logger.error('Erreur lors de la suppression du thread:', error);
      return false;
    }
  }

  /**
   * Supprime tous les threads d'un agent
   */
  private async deleteAgentThreads(agentId: string): Promise<void> {
    try {
      const stored = localStorage.getItem(this.threadsStorageKey);
      if (stored) {
        const allThreads = JSON.parse(stored) as AgentChatThread[];
        const filteredThreads = allThreads.filter(thread => thread.agentId !== agentId);
        localStorage.setItem(this.threadsStorageKey, JSON.stringify(filteredThreads));
      }
    } catch (error) {
      logger.error('Erreur lors de la suppression des threads:', error);
    }
  }

  /**
   * Sauvegarde la liste des agents
   */
  private async saveAgents(agents: AgentProfile[]): Promise<void> {
    try {
      localStorage.setItem(this.storageKey, JSON.stringify(agents));
    } catch (error) {
      logger.error('Erreur lors de la sauvegarde des agents:', error);
      throw error;
    }
  }

  /**
   * G√©n√®re un ID unique
   */
  private generateId(): string {
    return `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

// Instance singleton
export const agentService = new AgentService();